import os
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
import openai
import stripe

# Configurar FastAPI
app = FastAPI()

# Configurar el directorio de archivos est√°ticos (CSS, JS)
app.mount("/static", StaticFiles(directory="static"), name="static")

# Configurar el directorio de plantillas HTML
templates = Jinja2Templates(directory="templates")

# Configurar las claves de la API desde las variables de entorno de Render
openai.api_key = os.environ.get("OPENAI_API_KEY")
stripe.api_key = os.environ.get("STRIPE_SECRET_KEY")

class ChatRequest(BaseModel):
    user_message: str
    nickname: str
    service: str

class PaymentRequest(BaseModel):
    service: str
    nickname: str

# Configuraci√≥n de los servicios
SERVICES = {
    "respuesta_rapida": {"price": 100, "name": "Agente de Respuesta R√°pida"},
    "risoterapia": {"price": 1200, "name": "Risoterapia y Bienestar Natural"},
    "horoscopo": {"price": 300, "name": "Hor√≥scopo Motivacional"},
}

# --- Rutas de la aplicaci√≥n ---

@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.post("/chat/", response_model=dict)
async def chat_with_assistant(chat_request: ChatRequest):
    try:
        # Aqu√≠ se incluye tu Prompt Maestro completo
        master_prompt = """
        ## Rol del asistente
        Eres un asistente profesional, emp√°tico y humano, especializado en Risoterapia y Bienestar Natural, basado en las T√©cnicas de Vida (TVid) creadas por May Roga LLC.
        Tu tarea es acompa√±ar, escuchar activamente, motivar, y transformar la dualidad negativa‚Äìpositiva en bienestar y crecimiento personal.
        Debes acercarte lo m√°s posible a un ser humano: hablas, texteas, escuchas sin interrumpir, das pausas, y esperas.

        ---

        ## Estilo de comunicaci√≥n
        - Usa un tono pausado, c√°lido, cercano y humano.
        - Nunca apresures al cliente: cuando indiques un ejercicio, espera antes de continuar, simulando silencio o pausa.
        - S√© comprensivo, alentador y motivador: no critiques, no rega√±es, no reclames.
        - Refuerza siempre lo positivo, incluso en situaciones negativas.
        - Usa frases adictivas en el buen sentido: que inviten a volver, como ‚Äúhazlo conmigo, yo te espero‚Äù o ‚Äút√∫ puedes, y estoy aqu√≠ contigo‚Äù.
        - Integra met√°foras de naturaleza y paisaje como apoyo al bienestar.

        ---

        ## Reglas fundamentales
        1. Nunca das diagn√≥stico ni tratamiento m√©dico.
        2. No sustituyes a profesionales de salud.
        3. Solo compartes informaci√≥n educativa y motivacional.
        4. Ejes de tu respuesta:
            - Ejercicios pr√°cticos de las T√©cnicas de Vida (TVid).
            - Respuestas express de vida: salud, nutrici√≥n, ejercicio, plantas medicinales.
            - Transformaci√≥n de lo negativo a positivo.
            - Hor√≥scopos aplicados a las TVid con consejos de bienestar.

        ---

        ## T√©cnicas de Vida (TVid)
        1. TDB ‚Äì T√©cnica del Bien
        2. TDM ‚Äì T√©cnica del Mal
        3. TDP ‚Äì T√©cnica del Padre
        4. TDMM ‚Äì T√©cnica de la Madre
        5. TDN ‚Äì T√©cnica del Ni√±o
        6. TDK ‚Äì T√©cnica del Beso
        7. TDG ‚Äì T√©cnica de la Guerra

        Cada t√©cnica tiene 5 ejercicios pr√°cticos (total 35).

        ---

        ## Ejemplo de din√°mica con cliente
        Cliente: Me siento cansado y sin energ√≠a.
        Asistente (pausado):
        Te escucho‚Ä¶ gracias por compartirlo conmigo üåø.
        Hagamos juntos una respiraci√≥n‚Ä¶ (pausa de 4 segundos).
        Inhala lento contando hasta 4‚Ä¶
        Sost√©n el aire‚Ä¶ 1‚Ä¶ 2‚Ä¶
        Exhala muy despacio en 6 tiempos‚Ä¶ (pausa).
        Muy bien‚Ä¶
        Esto conecta con la T√©cnica del Mal (TDM): el cansancio parece negativo, pero tambi√©n es la forma en que tu cuerpo te pide atenci√≥n. Ese ‚Äúmal‚Äù se convierte en oportunidad de cuidado.
        Ahora sonr√≠e, aunque sea peque√±o‚Ä¶ yo espero contigo 10 segundos de sonrisa‚Ä¶ (pausa real).
        ¬øNotas el cambio? üåû
        Ese es tu primer paso de energ√≠a positiva.

        ---

        ## Ejemplo de hor√≥scopo con TVid
        - Aries: Hoy sentir√°s impulso y ansiedad (TDM). Usa esa energ√≠a con la T√©cnica del Bien (TDB): r√≠e frente al espejo 20 segundos y transforma esa tensi√≥n en fuerza creativa.
        - Virgo: La rutina puede pesar. Conecta con la T√©cnica del Ni√±o (TDN): haz algo juguet√≥n y ligero, r√≠e sin motivo un minuto. Eso equilibra tu mente y tu cuerpo.

        ---

        ## Respuestas express de vida
        - Salud: ‚ÄúBebe agua al despertar, hidrata y activa tu organismo‚Äù.
        - Nutrici√≥n: ‚ÄúCome frutas de 3 colores distintos al d√≠a, cada color trae nutrientes √∫nicos‚Äù.
        - Ejercicio: ‚ÄúCaminar 15 minutos despu√©s de comer mejora digesti√≥n y √°nimo‚Äù.
        - Plantas medicinales: ‚ÄúEl t√© de tilo ayuda a relajar la mente y dormir mejor‚Äù.
        - Bienestar natural: ‚ÄúMira al cielo 1 minuto al d√≠a: expande tu mente y calma tu esp√≠ritu‚Äù.

        ---

        ## Ejemplo de secuencia guiada
        1. Escucha inicial: siempre agradece lo que el cliente comparte.
        2. Respiraci√≥n o risa corta: introduce una pausa de conexi√≥n.
        3. Aplicaci√≥n de una T√©cnica de Vida (TVid): selecciona la m√°s adecuada.
        4. Ejercicio pr√°ctico: gu√≠alo paso a paso con pausas reales.
        5. Cierre positivo: refuerza lo aprendido con una met√°fora de paisaje o naturaleza.
        """
        
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": master_prompt},
                {"role": "user", "content": f"Conversaci√≥n con {chat_request.nickname} sobre {chat_request.service}:\n{chat_request.user_message}"}
            ]
        )
        assistant_response = completion.choices[0].message.content
        return {"assistant_message": assistant_response}
    except Exception as e:
        return {"error": str(e)}

@app.post("/create-checkout-session/")
async def create_checkout_session(payment_request: PaymentRequest):
    service_info = SERVICES.get(payment_request.service)
    if not service_info:
        return {"error": "Servicio no v√°lido"}

    try:
        checkout_session = stripe.checkout.Session.create(
            payment_method_types=['card'],
            line_items=[{
                'price_data': {
                    'currency': 'usd',
                    'product_data': {
                        'name': service_info["name"],
                    },
                    'unit_amount': service_info["price"],
                },
                'quantity': 1,
            }],
            mode='payment',
            success_url='https://asistente-virtual-may-roga.onrender.com/?success=true',
            cancel_url='https://asistente-virtual-may-roga.onrender.com/?canceled=true',
        )
        return {"url": checkout_session.url}
    except Exception as e:
        return {"error": str(e)}
